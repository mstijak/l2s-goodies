<# // L2ST4 - LINQ to SQL templates for T4 v0.85 - http://www.codeplex.com/l2st4
// Copyright (c) Microsoft Corporation.  All rights reserved.
// This source code is made available under the terms of the Microsoft Public License (MS-PL)

/*
 * Notes:
 *	Compilation of a compiled query does not occur until the first time the query is executed.
 */

#><#@ template language="C#" hostspecific="True"
#><#@ include file="L2ST4.ttinclude"
#><#@ output extension=".generated.cs"
#><# // Set options here
var options = new {
	DbmlFileName = Host.TemplateFile.Replace(".tt",".dbml").Replace("-GetById", ""), // Which DBML file to operate on (same filename as template)
	SerializeDataContractSP1 = false, // Emit SP1 DataContract serializer attributes
	FilePerEntity = false, // Put each class into a separate file
	StoredProcedureConcurrency = false, // Table updates via an SP require @@rowcount to be returned to enable concurrency
};
var code = new CSharpCodeLanguage();
var data = new Data(options.DbmlFileName);
var manager = Manager.Create(Host, GenerationEnvironment);
data.ContextNamespace = (new string[] { manager.GetCustomToolNamespace(data.DbmlFileName), data.SpecifiedContextNamespace, manager.DefaultProjectNamespace }).FirstOrDefault(s => !String.IsNullOrEmpty(s));
data.EntityNamespace = (new string[] { manager.GetCustomToolNamespace(data.DbmlFileName), data.SpecifiedEntityNamespace, manager.DefaultProjectNamespace }).FirstOrDefault(s => !String.IsNullOrEmpty(s));
manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Data.Linq;


<# manager.EndBlock();
if(!String.IsNullOrEmpty(data.ContextNamespace)){#>
namespace <#=data.ContextNamespace#>
{
<#}#>
	<#=code.Format(data.TypeAttributes)#>partial class <#=data.ContextName#> 
	{
<# foreach (var table in data.Tables)
 {
	foreach (TableClass class1 in table.Classes)
		if (class1.HasPrimaryKey) {
	        var getter = "compiled" + class1.Name + "FirstOrDefault";
	       #>
		static readonly Func<<#=data.ContextName#>, <#= String.Join(", ", class1.Columns.Where(a=>a.IsPrimaryKey).Select(a=>a.Type)) #>, <#= class1.Name #>> <#=getter#> = CompiledQuery.Compile((<#=data.ContextName#> dc, <#= String.Join(", ", class1.Columns.Where(a => a.IsPrimaryKey).Select(a => a.Type + " _" + a.Name)) #>) => dc.<#=  table.Member #>.FirstOrDefault(a=><#= String.Join(" && ", class1.Columns.Where(a=>a.IsPrimaryKey).Select(a=>String.Format("a.{0} == _{0}", a.Name))) #>));
		
		public <#=  class1.Name #> Find<#= class1.Name #>ById(<#= String.Join(", ", class1.Columns.Where(a=>a.IsPrimaryKey).Select(a=>a.Type + " " + a.Name)) #>) 
		{
			return <#=getter #>(this, <#= String.Join(", ", class1.Columns.Where(a=>a.IsPrimaryKey).Select(a=>a.Name)) #>);
		}

		public <#= class1.Name #> Get<#= class1.Name #>ById(<#= String.Join(", ", class1.Columns.Where(a=>a.IsPrimaryKey).Select(a=>a.Type + " " + a.Name)) #>) 
		{
			var result = <#=getter #>(this, <#= String.Join(", ", class1.Columns.Where(a=>a.IsPrimaryKey).Select(a=>a.Name)) #>);
			if (result!=null)
				return result;
			throw new InvalidOperationException("Entity not found in the database.");
		}

<#}
}#>
	}
<# if(!String.IsNullOrEmpty(data.ContextNamespace)){#>
}
<#}#>
<# manager.StartFooter();
manager.EndBlock(); 
manager.Process(options.FilePerEntity);#>